
Programming Assignment 1: Ignore Comments 

Due Thursday by 11:59pm Points 10 Submitting a file upload Available until Sep 26 at 11:59pm

Objective:
Write a program in C or C++ that will identify and remove comments from an input test file.

Your program should utilize a procedurally-driven deterministic finite state automoton (DFA) to identify comments. Table-driven DFA solutions will have reduced scores (per the grading rubric) since such solutions are typically automatically generated by compiler tools such as Yacc, Lex, Bison, etc.

Please note:
The input test files (below) conform to our C-like programming language defined in Backus-Naur Form (BNF) with two exceptions: programming_assignment_1-test_file_5.c Download programming_assignment_1-test_file_5.cand programming_assignment_1-test_file_6.c Download programming_assignment_1-test_file_6.ccontain partial C block-style comments that are unterminated. Therefore, I expect your program to output an error message along with the correct line number where the offending comment is. For example, "ERROR: Program contains C-style, unterminated comment on line 3".

There are two types of comments your program should remove:
C block-style comments: /* Everything inside this space is a comment! */
C++ style line comments: // This comment will be ignored until a newline (\n) is reached.

Tips and Hints:
When replacing C++ style line comments, replace the slash-slash characters, "//" and all characters up-to (but not including) the newline character, "\n" with whitespace. By doing so, you preserve the line numbering of the original input program.
When replacing C block style comments, replace the slash-asterisk characters, "/*" and all characters up-to asterisk-slash characters, "*/" inclusive with whitespace. This too preserves the line numbering of the original input program.
One of the subtle advantages of replacing comments with whitespace: line counts are unchanged compared to the original input file. This becomes important when displaying error messages. If you completely delete a comment rather than substituting whitespace, the resulting program's line numbering may change. It is much more desireable to output the correct line number from the original input file when syntax errors occur. Displaying the correct line number where syntax errors occur will be important in later programming assignments when parsing is involved.

Uploading your programming project files
Please upload your source code and Makefile as a zip or gzipped-tar file archive.

This criterion is linked to a Learning OutcomeCompilation
Will the program compile with GNU compiler?
2 pts
Proficient
Makefile provided. Student's assignment one program is written in C or C++ and compiles with gcc (GNU C compiler) or g++ (GNU C++ compiler) without syntax errors on GNU/Linux. No external libraries (besides standard built-in C/C++ libraries) are required to build the project.

This criterion is linked to a Parsing Implementation
How was the parsing technique implemented?
2 pts
Proficient
Student's assignment one program features a procedurally-driven deterministic finite-state automaton (DFA) to identify and parse comments.

This criterion is linked to a Learning OutcomeTest program 1
The first benchmark test.
1 pts
Proficient
Student's assignment one program removes all comments for test program one without impacting the line numbering of statements. Program line numbering is unaffected by removal of comments.

This criterion is linked to a Learning OutcomeTest program 2
The second benchmark test.
1 pts
Proficient
Student's assignment one program removes all comments for test program two without impacting the line numbering of statements. Program line numbering is unaffected by removal of comments.

This criterion is linked to a Learning OutcomeTest program 3
The third benchmark test.
1 pts
Proficient
Student's assignment one program removes all comments for test program three without impacting the line numbering of statements. Program line numbering is unaffected by removal of comments.

This criterion is linked to a Learning OutcomeTest program 4
The fourth benchmark test.
1 pts
Proficient
Student's assignment one program removes all comments for test program four without impacting the line numbering of statements. Program line numbering is unaffected by removal of comments.

This criterion is linked to a Learning OutcomeTest program 5
The fifth benchmark test.
1 pts
Proficient
Student's assignment one program detects an unterminated C-style block comment then outputs the error message "ERROR: Program contains C-style, unterminated comment on line 7".

This criterion is linked to a Learning OutcomeTest program 6
The sixth benchmark test.
1 pts
Proficient
Student's assignment one program detects an unterminated C-style block comment then outputs the error message "ERROR: Program contains C-style, unterminated comment on line 7".

